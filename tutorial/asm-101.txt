
	   ___   ______  ___   ______ ___
	  / _ | / __/  |/  /__<  / _ <  /
	 / __ |_\ \/ /|_/ /___/ / // / / 
	/_/ |_/___/_/  /_/   /_/\___/_/  				 

                      linuxthor
               x86_64 tutorial series
                       Part 1/3                                                                                                                                    
              "..The how and the why.."

Introduction
============

Why (not) assemby language? 

Why would anyone (YOU) want to write assembly language in 2020? For me three 
things come to mind: 

1) "It's (close to) the truth" - 

It's the pure unadulterated experience of telling a computer what to do! 
You can feel free to make it as beautiful or as terrible as you like! No 
language or framework need stand in your way!

2) "It will improve your life" - 

Yes! Seriously! The practice of doing things in assembly language is 
absolutely a gym workout for your brain. You can look at yourself in the 
mirror afterwards and really respect yourself for having been there and 
done that! 

3) "Altered states of conciousness" - 

Samadhi, bliss, the union with the whole and oneness with the universe - 
something that practitioners of  meditation and yoga may strive for years 
to achieve. The simple repetitive nature of assembly language allows you to 
soon 'lose yourself' and achieve a state whereeverything shuts down and the 
only thing that exists in this world is nothing.  

I've provided some examples which you can copy / paste or (perhaps) scribe it 
out for yourself.. But why the extra effort of that?? Very simple - The monks 
of the Middle Ages came to intimately know and experience texts that they 
copied.. The act of transcription became an act of meditation and prayer, not a
simple replication of letters.. 

"Achieve a prolonged or constant state of happiness by writing assembly 
language whenever possible _always_" 

What do you need?
=================

- A computer or VM with some (64 bit 'x86_64') version of Linux
- your text editor of choice
- nasm (netwide assembler) 
- ld (linker)
- gcc (C compiler)
- strace (optional / useful)
- gdb (optional / useful)

The versions don't matter too much at this stage so feel free to use what you 
have lying around rather than troubleto make a new VM or something with the 
latest versions. 

To begin
========

Welcome!  

The 'hello world' program appears.. 

===============================================================================
; linuxthor
;
; sys_write example
;
; assemble with:
; nasm -f elf64 -o sys_write.o sys_write.asm
; ld sys_write.o -o sys_write

BITS 64

section .text

global _start
_start:

    mov rax, 1            ;  sys_write
    mov rdi, 1
    mov rsi, string
    mov rdx, 6
    syscall

    mov rax, 60           ;  sys_exit
    syscall

section .data
    string   db 'Hiya',0x0d,0x0a,0
    lenstr   equ $-string

===============================================================================

I'll skip the obvious stuff about how it works for now as we can come back to 
that in a moment. I'd like to mention something first:

The file has two distinct sections. They're labelled as .data and .text but to 
put it a simple way we've got a section for 'code' and a section for 'data' - 
this is a good and _orderly_ thing and reflects how the world should work! Code 
is code and data is data! Data is a ragtag bunch of 'stuff' and code is the 
literal reflection of how you want the world to work.. (Any language that 
encourages you to mix the two should be treated with suspicion.. Yes. Seriously.. 
Code mistaken for data and data mistaken for code is the root of very many evils 
in this world..) 

I built the file using the instructions in the comment and for me it's 944 
bytes and it's identified (by the `file` command) as:

sys_write: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically 
linked, not stripped

This is to say that we've made a static ELF file - Success! We have made an 
executable binary file for Linux that is self contained ('self contained' in 
the sense that there are no external dependencies - we could make many copies 
of this file and send it over to lots of different 64 bit Linux systems 
belonging to our friends and it would run just as well on all of them without 
them having to install anything else extra.)

Let's recap briefly about syscalls first... 

syscalls
========

System calls or syscalls are the mechanism by which we - a simple userspace 
program of humble reputation - can ask the kernel to do 'something' for us. 
By 'something' I mean the stuff we're not allowed to do by ourselves.. For 
example in our 'hello world' program we can decide what we would like to write 
on the screen "hello world" or "halt and catch fire" or something.. the actual 
business of putting it there must be left to the kernel.. (The kernel has 
constant work to do so probably best that the kernel doesn't spend *too* long 
thinking about things like how to format punctuation in your mother tongue or 
if you meant that you were going to "eat your grandmother" so this relationship 
works out pretty well.. In userspace we spend a while thinking about some great 
thing to say or do then we load up some registers and issue a 'syscall' 
instruction to ask the kernel to simply 'make it so')  

Example syscall numbers:

0	sys_read
1	sys_write
2	sys_open
3	sys_close
..etc etc..

(To know in full which numbers correspond to which syscall you can either 
consult kernel source, documentation or there are some good online syscall 
tables)

System calls all broadly speaking "work the same way" (but god knows there are 
some weird ones..) which is to load some values into registers then issue a 
syscall instruction and the kernel will do your bidding:

rax - system call number	 
rax - return value

rdi - arg1
rsi - arg2
rdx - arg3
r10 - arg4
r8  - arg5
r9  - arg6

For the examples I mentioned above:

0	sys_read	
rdi	         rsi	                rdx
unsigned int fd	 char __user * buf	size_t count

1	sys_write	
rdi	         rsi	                    rdx
unsigned int fd	 const char __user * buf    size_t count

2	sys_open
rdi	                        rsi	        rdx
const char __user * filename	int flags	umode_t mode

3	sys_close
rdi
unsigned int fd
...etc etc...

So.. sys_write for our 'hello world' example:

ssize_t write(int fd, const void *buf, size_t count);

First we need to know the syscall number.. We can discover (by looking..) that 
it's number 1 so that goes in the rax register:

    mov rax, 1            ;  sys_write

Next we need to specify some fd to write to. STDOUT is good enough here (0,1,2 
== STDIN,STDOUT,STDERR) so we'll load up rdi with 1 for STDOUT:

    mov rdi, 1

Next we need to specify the address of something to write. In the case of the 
example above it's our string: 

    mov rsi, string

Which, residing in the data section, was the string: 

    string   db 'Hiya',0x0d,0x0a,0 
                                         
Next we need to specify the length of the string. Either this can be coded in 
directly: 

    mov rdx, 6

Or we might decide to use the helper:

    lenstr   equ $-string

Meaning we determine the length of the string without counting on fingers or 
something..

    mov rdx, lenstr

With everything loaded into the registers it's now a matter of issuing a 
'syscall' instruction and the kernel will do the work. 

Once it's finished the return value will be in register rax - in the case of 
the sys_write syscall it will be some number of characters written (hopefully 
it's the same as the length of the string..) 

Simple but powerful.. If you want to write some large and complex program then 
it's just a case of understanding which syscalls need to be made in what order.. 
However we can (and should) make life easier, safer and more reliable for 
certain types of complex program by using external libraries.. 

libraries
=========

Now.. we *could* write some very complex program from scratch.. Say for example 
an SSH client.. The network code.. The encryption code.. Management of keys 
etc.. However.. It's not how it's usually done in other languages and no reason 
we need to do it here.. 

Another example:

===============================================================================
; linuxthor
;
; simple libssh example for passwd auth 
;
; assemble with:
; nasm -f elf64 -o libssh.o libssh.asm
; gcc libssh.o -no-pie -o libssh -lssh
;

BITS 64

extern ssh_options_set, ssh_new, ssh_connect, ssh_disconnect
extern ssh_free, ssh_userauth_password

%define SSH_OPTIONS_HOST 0
%define SSH_OPTIONS_USER 4
%define SSH_OK 0
%define SSH_AUTH_SUCCESS 0

global main

main: 
    push rbp
    mov  rbp, rsp
    xor  eax, eax              
    call ssh_new

    cmp  rax, 0
    je   error

    mov  [ssh_sesh], rax

    mov  rdi, [ssh_sesh]
    mov  rsi, SSH_OPTIONS_HOST
    mov  rdx, con
    xor  rax, rax
    call ssh_options_set

    cmp  rax, 0
    jne  error

    mov  rdi, [ssh_sesh]
    mov  rsi, SSH_OPTIONS_USER       
    mov  rdx, usr                    
    xor  rax, rax
    call ssh_options_set

    cmp  rax, 0
    jne  error

    mov  rdi, [ssh_sesh]
    xor  rax, rax
    call ssh_connect 

    cmp  rax, SSH_OK
    jne  error

    mov  rdi, [ssh_sesh]
    mov  rsi, 0
    mov  rdx, pwd
    xor  rax, rax
    call ssh_userauth_password

    cmp  rax, SSH_AUTH_SUCCESS                
    jne  error

    mov  rdi, [ssh_sesh]
    xor  rax, rax
    call ssh_disconnect 

    mov  rdi, [ssh_sesh]
    xor  rax, rax
    call ssh_free

    pop rbp
    xor eax, eax         
    ret 

error:
    pop rbp
    mov rax, 1
    ret

section .data
    con db '192.168.0.1',0  
    usr db 'username',0
    pwd db '!passwd!',0

section .bss
    ssh_sesh resq 1
===============================================================================

In this example we're using the existing functionality of libssh - we only need 
to write a small amount of code to call functions within the library and that 
will take care of everything for us! That feels like an improvement to me over 
making lots of syscalls, rolling our own crypto and having to understand all 
mundane aspects of how SSH works! 

Some new stuff to note in this example: 

- A bunch of stuff we'd like to call from the library - functions - are declared 
  as 'extern' - this is to say we tell the assembler the fact that these 
  functions exist in the library but no other details like arguments or 
  return types:

extern ssh_options_set, ssh_new, ssh_connect, ssh_disconnect
extern ssh_free, ssh_userauth_password

- We have the same great thing where code and data live in separate places (we 
  omit explicitly naming the .text section for the code as it's implied) but 
  now there is a new section .bss where we can reserve some amount of space to 
  store data.

    ssh_sesh resq 1
  
  Here we reserve a qword. 

  (For reference:
  
  1 byte (8 bit):     byte  == db or resb
  2 bytes (16 bit):   word  == dw or resw
  4 bytes (32 bit):   dword == dd or resd
  8 bytes (64 bit):   qword == dq or resq

  ^^^-- Those are the most frequently encountered but there are also:
  
  10 bytes (80 bit):  tword == dt or rest 
  16 bytes (128 bit): oword == do or reso / ddq or resdq
  32 bytes (256 bit): yword == dy or resy 
  64 bytes (512 bit): zword == dz or resz)

 - This time we establish 'stack frame' - wasn't absolutely required for the 
   simple syscall example however here we must do it or the program may crash 
   when we make external library calls so we wrap the code in:

    push rbp
    mov  rbp, rsp

    [...code...]

    pop  rbp 
    ret    

-  Rather than starting at _start this program starts at main. We'll actually 
   use gcc as a convenient way to link our program so this is needed here 
   (..yeah it's a bit weird but if it feels good you should do it right?..) 

-  There are no (direct) syscalls in this example. Not a single one! Rather we 
   hand off to the library to do work for us. 

   Passing arguments to these library functions works like:

   rax - return value

   rdi - arg1
   rsi - arg2
   rdx - arg3
   rcx - arg4
   r8  - arg5
   r9  - arg6

   (NOTE  - Similar to the way arguments are passed to syscalls but **NOT** 
   identical!) 

   For example for some C function from the libssh library:

   int ssh_options_set (ssh_session session, enum ssh_options_e type, const 
    void * value) 

   We arrive at something like this: 

   mov  rdi, [ssh_sesh]
   mov  rsi, SSH_OPTIONS_HOST
   mov  rdx, con
   xor  rax, rax
   call ssh_options_set

   cmp  rax, 0
   jne  error

   The ssh_session (we previously stored in some memory put aside via our 
   reservation in .bss) is loaded into rdi register. SSH_OPTIONS_HOST the enum 
   ssh_options_e type is loaded into rsi & finally our 'con' is put in rdx (From 
   the .data section - con db '192.168.0.1',0) then we can call the library 
   function ssh_options_set and check what is returned in rax (which - for good 
   hygeine - we have zeroed first)

Next time:
==========

So here ends the first part of this three part tutorial series. In the next part 
I will cover: 

- How to use dlopen to load libraries at runtime and execute code
- How to write a library in assembly language 
- Three things dynamic ELF files are good for 

I hope you enjoyed this first guide and you can see why I think assembly language 
can be as flexible, powerful and beautiful as any other programming language! 

 =============================================================
| Resources:                                                  |
| ==========                                                  |
| If you would like to see some code I maintain a repo at     |
| https://github.com/linuxthor/asm/                           |
| updated from time to time with various examples.            |
|                                                             |
| Contact me on twitter (@linuxthor) for any questions.       | 
|                                                             |
 =============================================================
